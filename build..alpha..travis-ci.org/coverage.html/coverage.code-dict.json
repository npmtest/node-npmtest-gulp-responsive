{"/home/travis/build/npmtest/node-npmtest-gulp-responsive/test.js":"/* istanbul instrument in package npmtest_gulp_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/lib.npmtest_gulp_responsive.js":"/* istanbul instrument in package npmtest_gulp_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_responsive = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_responsive = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-responsive && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_responsive\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_responsive.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_responsive.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_responsive.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_responsive.__dirname + '/lib.npmtest_gulp_responsive.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/node_modules/gulp-responsive/lib/index.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar through2 = require('through2');\nvar minimatch = require('minimatch');\nvar async = require('async');\nvar _ = require('lodash');\nvar plur = require('plur');\n\nvar sharpVinyl = require('./sharp');\nvar prepareConfig = require('./config');\n\nvar PLUGIN_NAME = require('../package.json').name;\n\n\n\nfunction gulpResponsive(config, options) {\n\n  var statistics = {\n    total: 0,\n    matched: 0,\n    created: 0,\n    unmatched: 0,\n    unmatchedBlocked: 0,\n    unmatchedPassed: 0\n  };\n\n  options = _.defaults({}, options, {\n    errorOnUnusedConfig: true,\n    errorOnUnusedImage: true,\n    errorOnEnlargement: true,\n    passThroughUnused: false,\n    silent: false,\n    stats: true\n  });\n\n  config = prepareConfig(config || [], options);\n\n  return through2.obj(function (file, enc, done) {\n      var that = this;\n\n      if (file.isNull()) {\n        this.push(file);\n        return done();\n      }\n\n      if (file.isStream()) {\n        return done(new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));\n      }\n\n      statistics.total++;\n      var matched = config.filter(function(conf) {\n        return minimatch(file.relative, conf.name);\n      });\n\n      if (matched.length === 0) {\n        statistics.unmatched++;\n        var message = 'File `' + file.relative + '`: Image does not match any config';\n        if (options.errorOnUnusedImage) {\n          return done(new gutil.PluginError(PLUGIN_NAME, message));\n        } else if (options.passThroughUnused) {\n          this.push(file);\n          statistics.unmatchedPassed++;\n          if (!options.silent){\n            gutil.log(PLUGIN_NAME + ': (pass through without changes)', gutil.colors.magenta(message));\n          }\n          return done();\n        }\n        statistics.unmatchedBlocked++;\n        if (!options.silent){\n          gutil.log(PLUGIN_NAME + ': (skip for processing)', gutil.colors.magenta(message));\n        }\n        return done();\n      }\n\n      statistics.matched++;\n      async.each(matched, function(conf, cb) {\n        // config item matched (can be matched multiple times)\n        conf.matched = true;\n\n        sharpVinyl(file, conf, options, function(err, newFile) {\n          if (err) {\n            return cb(err);\n          }\n          if (newFile) {\n            that.push(newFile);\n            statistics.created++;\n          }\n          cb();\n        });\n      }, done);\n    }, function(cb) {\n      var notMatched = config.filter(function(conf) {\n        return !conf.matched;\n      });\n\n      if (options.stats && !(options.silent && statistics.created === 0)){\n        var msg =\n          'Created ' + statistics.created + ' ' + plur('image', statistics.created) +\n          gutil.colors.dim.white(' (matched ' + statistics.matched + ' of ' +\n          statistics.total + ' ' + plur('image', statistics.total) + ')');\n\n        gutil.log(PLUGIN_NAME + ':', gutil.colors.green(msg));\n      }\n\n      if (notMatched.length > 0 && (!options.silent || options.errorOnUnusedConfig)) {\n        var message = 'Available images do not match the following config:';\n        notMatched.forEach(function(conf) {\n          message += '\\n  - `' + conf.name + '`';\n        });\n        if (options.errorOnUnusedConfig) {\n          return cb(new gutil.PluginError(PLUGIN_NAME, message));\n        } else {\n          gutil.log(PLUGIN_NAME + ':', gutil.colors.magenta(message));\n        }\n      }\n      cb();\n    }\n  );\n}\n\nmodule.exports = gulpResponsive;\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/node_modules/gulp-responsive/lib/sharp.js":"'use strict';\n\nvar sharp = require('sharp');\nvar gutil = require('gulp-util');\nvar path = require('path');\nvar rename = require('rename');\nvar size = require('./size');\nvar format = require('./format');\n\nvar PLUGIN_NAME = require('../package.json').name;\n\nmodule.exports = function(file, config, options, cb) {\n  var errPrefix = 'File `' + file.relative + '`: ';\n  var image = sharp(file.contents);\n\n  image.metadata(function(err, metadata) {\n    if (err) {\n      return cb(new gutil.PluginError(PLUGIN_NAME, errPrefix + err.message));\n    }\n\n    var width, height, extract, toFormat;\n\n    var filePath = file.path;\n    if (config.rename) {\n      filePath = path.join(file.base, rename(file.relative, config.rename));\n    }\n\n    if (config.format) {\n      toFormat = config.format;\n    } else {\n      toFormat = format(filePath);\n    }\n\n    try {\n      width = size(config.width, metadata.width);\n      height = size(config.height, metadata.height);\n    } catch  (err){\n      return cb(new gutil.PluginError(PLUGIN_NAME, errPrefix + err.message));\n    }\n\n    if (width || height) {\n      if (config.withoutEnlargement && (width > metadata.width || height > metadata.height)) {\n        var message = errPrefix + 'Image enlargement is detected';\n        if (width) {\n          message += '\\n  real width: ' + metadata.width + 'px, required width: ' + width + 'px';\n        }\n        if (height) {\n          message += '\\n  real height: ' + metadata.height + 'px, required height: ' + height + 'px';\n        }\n        if (options.errorOnEnlargement) {\n          return cb(new gutil.PluginError(PLUGIN_NAME, message));\n        } else if (config.skipOnEnlargement) {\n          if (!options.silent){\n            gutil.log(PLUGIN_NAME + ': (skip for processing)', gutil.colors.red(message));\n          }\n          // passing a null file to the callback stops a new image being added to the pipeline for this config\n          return cb(null, null);\n        }\n        if (!options.silent){\n          gutil.log(PLUGIN_NAME + ': (skip for enlargement)', gutil.colors.yellow(message));\n        }\n      }\n    }\n\n    try {\n      if (config.extractBeforeResize) {\n        extract = config.extractBeforeResize;\n        image.extract(extract.top, extract.left, extract.width, extract.height);\n      }\n\n      if (config.interpolation) {\n        config.interpolator = config.interpolation;\n        gutil.log(PLUGIN_NAME + ':', gutil.colors.red('`interpolation` option is deprecated, use `interpolator` instead'));\n      }\n\n      image.resize(width, height, {\n        interpolator: config.interpolator,\n        kernel: config.kernel,\n      });\n\n      if (config.extractAfterResize) {\n        extract = config.extractAfterResize;\n        image.extract(extract.top, extract.left, extract.width, extract.height);\n      }\n\n      if (config.crop !== false) {\n        image.crop(config.crop);\n      }\n\n      if (config.embed) {\n        image.embed();\n      }\n\n      if (config.max) {\n        image.max();\n      }\n\n      if (config.min) {\n        image.min();\n      }\n\n      if (config.ignoreAspectRatio) {\n        image.ignoreAspectRatio();\n      }\n\n      image.withoutEnlargement(config.withoutEnlargement);\n      image.background(config.background);\n      image.flatten(config.flatten);\n      image.negate(config.negate);\n\n      if (config.rotate !== false) {\n        if (typeof config.rotate === 'boolean') {\n          image.rotate();\n        } else {\n          image.rotate(config.rotate);\n        }\n      }\n\n      image.flip(config.flip);\n      image.flop(config.flop);\n      image.blur(config.blur);\n\n      if (typeof config.sharpen === 'boolean') {\n        image.sharpen(config.sharpen);\n      } else {\n        image.sharpen(config.sharpen.sigma, config.sharpen.flat, config.sharpen.jagged);\n      }\n\n      image.threshold(config.threshold);\n\n      if (config.gamma !== false) {\n        if (typeof config.gamma === 'boolean') {\n          image.gamma();\n        } else {\n          image.gamma(config.gamma);\n        }\n      }\n\n      image.grayscale(config.grayscale);\n      image.normalize(config.normalize);\n      image.quality(config.quality);\n      image.progressive(config.progressive);\n      image.withMetadata(config.withMetadata);\n      image.tile(config.tile);\n      image.withoutChromaSubsampling(config.withoutChromaSubsampling);\n      image.compressionLevel(config.compressionLevel);\n\n      image.toFormat(toFormat);\n\n    } catch (err) {\n      err.message = errPrefix + err.message;\n      return cb(new gutil.PluginError(PLUGIN_NAME, err, {showStack: true}));\n    }\n\n    image.toBuffer(function(err, buf) {\n      if (err) {\n        err.message = errPrefix + err.message;\n        return cb(new gutil.PluginError(PLUGIN_NAME, err, {showStack: true}));\n      }\n\n      var newFile = new gutil.File({\n        cwd: file.cwd,\n        base: file.base,\n        path: filePath,\n        contents: buf\n      });\n\n      if (!options.silent){\n        gutil.log(PLUGIN_NAME + ':', gutil.colors.green(file.relative + ' -> ' + newFile.relative));\n      }\n\n      cb(null, newFile);\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/node_modules/gulp-responsive/lib/size.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = function(neededSize, originalSize) {\n  if (neededSize === undefined || neededSize === null) {\n    return null;\n  } else if (_.isString(neededSize) && neededSize.indexOf('%') > -1) {\n    var percentage = parseFloat(neededSize);\n    if (isNaN(percentage)){\n      throw new Error('Wrong percentage size \"'+neededSize+'\"');\n    }\n    return Math.round(originalSize * percentage * 0.01);\n  } else {\n    neededSize = parseInt(neededSize);\n    if (isNaN(neededSize)){\n      throw new Error('Wrong size \"'+neededSize+'\"');\n    }\n    return neededSize;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/node_modules/gulp-responsive/lib/format.js":"'use strict';\n\nvar path = require('path');\n\nmodule.exports = function(filePath) {\n  var extname = path.extname(filePath);\n  switch (extname) {\n    case '.jpeg':\n    case '.jpg':\n    case '.jpe':\n      return 'jpeg';\n    case '.png':\n      return 'png';\n    case '.webp':\n      return 'webp';\n    default:\n      return 'unsupported';\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-responsive/node_modules/gulp-responsive/lib/config.js":"/*jshint -W083 */\n'use strict';\n\nvar util = require('util');\nvar _ = require('lodash');\n\n/*\nConfiguration unit is an object:\n\n* name: String - filename glob pattern\n* width: Number - not set by default\n* height: Number - not set by default\n* withoutEnlargement: Boolean - default true\n* skipOnEnlargement: Boolean - default false\n* rename: String - new file name, file will not be renamed by dafault\n\nConfiguration can be provided in one of the following formats:\n\n1. Array of unique configurations\n\n[{\n  name: 'logo.png',\n  width: 200,\n  height: 100\n},{\n  name: 'banner.png',\n  width: 500\n}]\n\n2. Object of unique configurations. Keys are names of files.\n\n{\n  'logo.png': {\n    width: 300,\n    height: 200,\n    raname: 'logo@2x.png'\n  },\n  'background-*.png': {\n    width: 1400,\n    withoutEnlargement: true\n  }\n}\n\n3. Object of array of unique configurations. Keys are names of files.\n\n{\n  'logo.png': [{\n      width: 200,\n      raname: 'logo@1x.png'\n    },{\n      width: 400,\n      rename: 'logo@2x.png'\n    }],\n  'background-*': [{\n    height: 400\n  }]\n}\n\n*/\n\nvar defaultConfig = {\n  crop: false,\n  embed: false,\n  min: false,\n  max: false,\n  withoutEnlargement: true,\n  skipOnEnlargement: false,\n  ignoreAspectRatio: false,\n  interpolator: 'bicubic',\n  kernel: 'lanczos3',\n  extractBeforeResize: false,\n  extractAfterResize: false,\n  background: '#fff',\n  flatten: false,\n  negate: false,\n  rotate: false,\n  flip: false,\n  flop: false,\n  blur: false,\n  sharpen: false,\n  threshold: false,\n  gamma: false,\n  grayscale: false,\n  normalize: false,\n  quality: 80,\n  progressive: false,\n  withMetadata: false,\n  tile: false,\n  withoutChromaSubsampling: false,\n  compressionLevel: 6,\n  format: null,\n};\n\nfunction prepareConfig(config, globalConfig) {\n  var preparedConfig = [];\n\n  if (!util.isArray(config)) {\n    for (var name in config) {\n      if (config.hasOwnProperty(name)) {\n        if (util.isArray(config[name])) {\n          config[name].forEach(function(conf) {\n            preparedConfig.push(_.defaults({name: name}, conf, globalConfig, defaultConfig));\n          });\n        } else {\n          preparedConfig.push(_.defaults({name: name}, config[name], globalConfig, defaultConfig));\n        }\n      }\n    }\n  } else {\n    config.forEach(function(conf) {\n      preparedConfig.push(_.defaults({}, conf, globalConfig, defaultConfig));\n    });\n  }\n  return preparedConfig;\n}\n\nmodule.exports = prepareConfig;\n"}